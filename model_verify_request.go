/*
reCAPTCHA

reCAPTCHA v3 returns a score for each request without user friction. The score is based on interactions with your site and enables you to take an appropriate action for your site. Register reCAPTCHA v3 keys on the reCAPTCHA Admin console.

API version: 3.0.0
Contact: s.pourcheragh@wallex.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package recaptcha

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VerifyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VerifyRequest{}

// VerifyRequest struct for VerifyRequest
type VerifyRequest struct {
	// The shared key between your site and reCAPTCHA.
	Secret string `json:"secret"`
	// The user response token provided by the reCAPTCHA client-side integration on your site.
	Response string `json:"response"`
	// The user's IP address.
	Remoteip *string `json:"remoteip,omitempty"`
}

type _VerifyRequest VerifyRequest

// NewVerifyRequest instantiates a new VerifyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerifyRequest(secret string, response string) *VerifyRequest {
	this := VerifyRequest{}
	this.Secret = secret
	this.Response = response
	return &this
}

// NewVerifyRequestWithDefaults instantiates a new VerifyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerifyRequestWithDefaults() *VerifyRequest {
	this := VerifyRequest{}
	return &this
}

// GetSecret returns the Secret field value
func (o *VerifyRequest) GetSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Secret
}

// GetSecretOk returns a tuple with the Secret field value
// and a boolean to check if the value has been set.
func (o *VerifyRequest) GetSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Secret, true
}

// SetSecret sets field value
func (o *VerifyRequest) SetSecret(v string) {
	o.Secret = v
}

// GetResponse returns the Response field value
func (o *VerifyRequest) GetResponse() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Response
}

// GetResponseOk returns a tuple with the Response field value
// and a boolean to check if the value has been set.
func (o *VerifyRequest) GetResponseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Response, true
}

// SetResponse sets field value
func (o *VerifyRequest) SetResponse(v string) {
	o.Response = v
}

// GetRemoteip returns the Remoteip field value if set, zero value otherwise.
func (o *VerifyRequest) GetRemoteip() string {
	if o == nil || IsNil(o.Remoteip) {
		var ret string
		return ret
	}
	return *o.Remoteip
}

// GetRemoteipOk returns a tuple with the Remoteip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyRequest) GetRemoteipOk() (*string, bool) {
	if o == nil || IsNil(o.Remoteip) {
		return nil, false
	}
	return o.Remoteip, true
}

// HasRemoteip returns a boolean if a field has been set.
func (o *VerifyRequest) HasRemoteip() bool {
	if o != nil && !IsNil(o.Remoteip) {
		return true
	}

	return false
}

// SetRemoteip gets a reference to the given string and assigns it to the Remoteip field.
func (o *VerifyRequest) SetRemoteip(v string) {
	o.Remoteip = &v
}

func (o VerifyRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VerifyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["secret"] = o.Secret
	toSerialize["response"] = o.Response
	if !IsNil(o.Remoteip) {
		toSerialize["remoteip"] = o.Remoteip
	}
	return toSerialize, nil
}

func (o *VerifyRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"secret",
		"response",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVerifyRequest := _VerifyRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVerifyRequest)

	if err != nil {
		return err
	}

	*o = VerifyRequest(varVerifyRequest)

	return err
}

type NullableVerifyRequest struct {
	value *VerifyRequest
	isSet bool
}

func (v NullableVerifyRequest) Get() *VerifyRequest {
	return v.value
}

func (v *NullableVerifyRequest) Set(val *VerifyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVerifyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVerifyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerifyRequest(val *VerifyRequest) *NullableVerifyRequest {
	return &NullableVerifyRequest{value: val, isSet: true}
}

func (v NullableVerifyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerifyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


