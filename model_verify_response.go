/*
reCAPTCHA

reCAPTCHA v3 returns a score for each request without user friction. The score is based on interactions with your site and enables you to take an appropriate action for your site. Register reCAPTCHA v3 keys on the reCAPTCHA Admin console.

API version: 3.0.0
Contact: s.pourcheragh@wallex.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package recaptcha

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the VerifyResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VerifyResponse{}

// VerifyResponse struct for VerifyResponse
type VerifyResponse struct {
	Success bool `json:"success"`
	// timestamp of the challenge load.
	ChallengeTs *time.Time `json:"challenge_ts,omitempty"`
	// the hostname of the site where the reCAPTCHA was solved
	Hostname *string `json:"hostname,omitempty"`
	ErrorCodes []interface{} `json:"error-codes,omitempty"`
}

type _VerifyResponse VerifyResponse

// NewVerifyResponse instantiates a new VerifyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerifyResponse(success bool) *VerifyResponse {
	this := VerifyResponse{}
	this.Success = success
	return &this
}

// NewVerifyResponseWithDefaults instantiates a new VerifyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerifyResponseWithDefaults() *VerifyResponse {
	this := VerifyResponse{}
	return &this
}

// GetSuccess returns the Success field value
func (o *VerifyResponse) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *VerifyResponse) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *VerifyResponse) SetSuccess(v bool) {
	o.Success = v
}

// GetChallengeTs returns the ChallengeTs field value if set, zero value otherwise.
func (o *VerifyResponse) GetChallengeTs() time.Time {
	if o == nil || IsNil(o.ChallengeTs) {
		var ret time.Time
		return ret
	}
	return *o.ChallengeTs
}

// GetChallengeTsOk returns a tuple with the ChallengeTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyResponse) GetChallengeTsOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ChallengeTs) {
		return nil, false
	}
	return o.ChallengeTs, true
}

// HasChallengeTs returns a boolean if a field has been set.
func (o *VerifyResponse) HasChallengeTs() bool {
	if o != nil && !IsNil(o.ChallengeTs) {
		return true
	}

	return false
}

// SetChallengeTs gets a reference to the given time.Time and assigns it to the ChallengeTs field.
func (o *VerifyResponse) SetChallengeTs(v time.Time) {
	o.ChallengeTs = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *VerifyResponse) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyResponse) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *VerifyResponse) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *VerifyResponse) SetHostname(v string) {
	o.Hostname = &v
}

// GetErrorCodes returns the ErrorCodes field value if set, zero value otherwise.
func (o *VerifyResponse) GetErrorCodes() []interface{} {
	if o == nil || IsNil(o.ErrorCodes) {
		var ret []interface{}
		return ret
	}
	return o.ErrorCodes
}

// GetErrorCodesOk returns a tuple with the ErrorCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyResponse) GetErrorCodesOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.ErrorCodes) {
		return nil, false
	}
	return o.ErrorCodes, true
}

// HasErrorCodes returns a boolean if a field has been set.
func (o *VerifyResponse) HasErrorCodes() bool {
	if o != nil && !IsNil(o.ErrorCodes) {
		return true
	}

	return false
}

// SetErrorCodes gets a reference to the given []interface{} and assigns it to the ErrorCodes field.
func (o *VerifyResponse) SetErrorCodes(v []interface{}) {
	o.ErrorCodes = v
}

func (o VerifyResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VerifyResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["success"] = o.Success
	if !IsNil(o.ChallengeTs) {
		toSerialize["challenge_ts"] = o.ChallengeTs
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.ErrorCodes) {
		toSerialize["error-codes"] = o.ErrorCodes
	}
	return toSerialize, nil
}

func (o *VerifyResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"success",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVerifyResponse := _VerifyResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVerifyResponse)

	if err != nil {
		return err
	}

	*o = VerifyResponse(varVerifyResponse)

	return err
}

type NullableVerifyResponse struct {
	value *VerifyResponse
	isSet bool
}

func (v NullableVerifyResponse) Get() *VerifyResponse {
	return v.value
}

func (v *NullableVerifyResponse) Set(val *VerifyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVerifyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVerifyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerifyResponse(val *VerifyResponse) *NullableVerifyResponse {
	return &NullableVerifyResponse{value: val, isSet: true}
}

func (v NullableVerifyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerifyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


